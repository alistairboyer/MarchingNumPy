See the full documentation on `Read The Docs <https://marchingnumpy.readthedocs.io/en/latest/>`_.

For a video series that explores the marching cubes algorithm
and the journey towards the creation of this package, see:

    - `Video 01 - Marching Cubes and Python NumPy: Introduction to Marching Cubes (with Blender!) <https://youtu.be/1FyokQuXmsc>`_
        Exploring volume data and the concept of an isosurface.
        Walking through the creation of a basic Python implementation
        of the Marching Cubes algorithm.
        Visualisation of the results in Blender.
    - Video 02 - Marching Cubes in NumPy
        General introduction to optimisation.
        Converting all the functions in the 
        basic Python implementation of 
        marching cubes to NumPy NDArray methods.
        Advanced NumPy slicing and indexing.
        Significant speedup of code execution.
        In production!



:code:`import MarchingNumPy` to access to the following functions:

    - :code:`MarchingNumPy.marching_cubes_lorensen`: 
      An implementation of the marching cubes algorithm.
    - :code:`MarchingNumPy.marching_squares`:
      An implementation of the marching squares algorithm.
    - :code:`MarchingNumPy.marching_triangles` and :code:`MarchingNumPy.marching_triangles_reversed`:
      A reimagniation of the 2D marching algorithm as triangles instead of squares.

Each takes a n-dimensional volume and a level.
Each calculates an isosurface and returns vertices and 
geometry [indexed by the order of vertices].

The above functions are generated by a factory :code:`Marching.marching_factory`
by an algorithm that involves:

    - Finding intersects along volume axes
      (:code:`FindIntersects.find_intersects`).
    - Classifying the volume according the value at neighboring points
      (:code:`VolumeTypes.volume_types`).
    - Reclassifying the volume for ambiguous cases by performing further tests
      (:code:`ResolveAmbiguous.resolve_ambiguous_types`).
    - Looking up geometry from tables based upon the volume types
      (:code:`LookUpGeometry.look_up_geometry`).
    - Converting vertex_ids to the order the vertex appears in the vertices list
      (:code:`ConvertIndexes.convert_indexes`).

Development is focussed on:

  -  A Dual Contouring algorithm.
  -  Adding ambiguity resolution to marching_cubes_lorensen.
  -  Speed improvements.

Comments, suggestions and corrections: `MarchingNumPy@boyer-research.com <MarchingNumPy@boyer-research.com>`_.
